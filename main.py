
from fastapi import FastAPI, File, UploadFile
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
import uuid
import importlib.util
import os

from langchain.embeddings import FakeEmbeddings
from langchain.vectorstores import Chroma
from langchain.text_splitter import CharacterTextSplitter
from langchain.docstore.document import Document

app = FastAPI()
user_memory = {}
PLUGINS_DIR = "./plugins"

embedding = FakeEmbeddings()
vector_db = Chroma(collection_name="limitless_ai", embedding_function=embedding)
splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=50)

def load_plugins():
    loaded = []
    if not os.path.exists(PLUGINS_DIR):
        os.makedirs(PLUGINS_DIR)
    for file in os.listdir(PLUGINS_DIR):
        if file.endswith(".py"):
            path = os.path.join(PLUGINS_DIR, file)
            spec = importlib.util.spec_from_file_location("plugin_" + file[:-3], path)
            mod = importlib.util.module_from_spec(spec)
            try:
                spec.loader.exec_module(mod)
                loaded.append(file)
            except Exception as e:
                print(f"Failed to load {file}: {e}")
    return loaded

dynamic_plugins = load_plugins()

def generate_code(prompt: str, language: Optional[str] = "python", user_id: str = "anonymous") -> str:
    signature = f"# Generated by Limitless AI | User: {user_id} | {datetime.utcnow().isoformat()}"
    result = f"# Code for: {prompt}\nprint('Generated mock in {language}')"
    full_code = f"{signature}\n{result}"

    if user_id not in user_memory:
        user_memory[user_id] = []
    user_memory[user_id].append({
        "id": str(uuid.uuid4()),
        "prompt": prompt,
        "language": language,
        "code": full_code,
        "timestamp": datetime.utcnow().isoformat()
    })
    return full_code

class CodeRequest(BaseModel):
    prompt: str
    language: Optional[str] = "python"
    user_id: Optional[str] = "anonymous"

@app.post("/generate")
def generate(request: CodeRequest):
    return {"code": generate_code(request.prompt, request.language, request.user_id)}

@app.get("/memory/{user_id}")
def get_memory(user_id: str):
    return user_memory.get(user_id, [])

@app.get("/plugins")
def list_plugins():
    return {"loaded_plugins": dynamic_plugins}

@app.post("/learn_from_file")
async def learn_from_file(file: UploadFile = File(...)):
    content = await file.read()
    text = content.decode("utf-8")
    docs = [Document(page_content=chunk) for chunk in splitter.split_text(text)]
    vector_db.add_documents(docs)
    return {"status": "learned", "chunks": len(docs)}

@app.get("/")
def root():
    return {
        "message": "Limitless AI is live.",
        "features": [
            "Plugin support",
            "RAG memory with LangChain + ChromaDB",
            "learn_from_file for text/code",
            "Multi-language code generation",
            "Cross-platform deployable"
        ]
    }
